<style>
    td, th {
    text-align: center;
    font-size: 1.2vw;
    }

    @media (max-width: 720px) {
        td, th{
            font-size: 15px;
        }
    }

    .lds-dual-ring {
  display: inline-block;
  width: 40px;
  height: 40px;
}
.lds-dual-ring:after {
  content: " ";
  display: block;
  width: 32px;
  height: 32px;
  margin: 4px;
  border-radius: 50%;
  border: 6px solid rgb(21, 169, 43);
  border-color: rgb(21, 169, 43) transparent rgb(21, 169, 43) transparent;
  animation: lds-dual-ring 1.2s linear infinite;
}
@keyframes lds-dual-ring {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
</style>

<div class="container-fluid" style="margin-bottom: 2vh;" id="main-container" >
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8 offset-md-2 col-12" >
                <table class="table">
                    <table class="table">
                        <thead>
                            <tr style="text-align: center">
                                <th>Hive Name</th>
                                <th>Latest Stress</th>
                                <th>Status</th>
                                <th>Date of Latest Stress</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td id="tb-hive-name"></td>
                                <td id="tb-hive-stress"></td>
                                <td id="tb-hive-condition"></td>
                                <td id="tb-data-date"></td>
                            </tr>
                        </tbody>
                    </table>
                    
                </table>
            </div>
        </div>
        <div class="row" style="margin-top: 5vh;">
            <div class="col-md-8 offset-md-2 col-12">
                <h1 style="display: inline-block; vertical-align: middle;">Relative stress history</h1>
                <div style="display: inline-block; vertical-align: middle; margin-left: 8px;" class="lds-dual-ring" id="animation"></div>
                <div id="chart1" style="margin-top: 1vh;">
                    <!-- chart 1 content here -->
                    <canvas id="chart-1" ></canvas>
                </div>
            </div>
        </div>
        <div class="row" style="margin-top: 5vh;">
            <div class="col-md-8 offset-md-2 col-12">
                <h1>Absorbtion</h1>
                <select class="form-control" onchange="changeChart2(this.value)" style="max-width: 250px; margin-top: 1vh; margin-bottom: 1vh; margin-right: 5px;" id="selector"></select>
                
                <h4 id="chart-2-label" style="margin-top: 3vh;"></h4>
                <div id="chart2" style="margin-top: 2vh;">
                    <!-- chart 2 content here -->
                    <canvas id="chart-2"></canvas>
                </div>

                 

                
            

                
            </div>
        </div>
    </div>
    

</div>




<script>
    
    var stress_data;
    var reading_selector = 0
    var prev_dates = []

    var hive_name = window.location.pathname.split('/').pop();

    var ctx1 = document.getElementById("chart-1").getContext("2d");
    var chart_1_drawn = false
    var chart1;

    var ctx = document.getElementById("chart-2").getContext("2d");
    var chart_2_drawn = false
    var chart2;

    var animation = document.getElementById("animation");

    function display_error(msg){
            var main_container = document.getElementById("main-container")

            main_container.innerHTML = `    
            <div class="row justify-content-center">
                <div class="col-md-6 text-center">
                    <div class="alert alert-dismissible alert-danger" style="font-size: xx-large;">
                        <p class="mb-0">${msg}</p>
                    </div>

                </div>
            </div>`
    }

    function format_date(dateString){
        let date = new Date(dateString);
        let dateOptions = { day: "numeric", month: "short" };
        let timeOptions = { hour: "numeric", minute: "numeric" };
        let formattedDate = date.toLocaleDateString("en-US", dateOptions);
        let formattedTime = date.toLocaleTimeString("en-US", timeOptions);
        let finalString = `${formattedDate} ${formattedTime}`;

        return finalString
    }



    async function load_data(){
        stress_data = null

        url = `/api/get-hive-data/${hive_name}`

        var request = await fetch(url)
        var status_code = request.status



        if (status_code != 200){
            display_error("Oops, there was an error connecting to the API")
            return
        }

        var responce = await request.json()

        if (responce.data.length == 0){
            stress_data = null
        } else {
            stress_data = responce.data
        }

        
    }

    function update_table(){
        var table_hive_name = document.getElementById("tb-hive-name")
        var table_hive_stress = document.getElementById("tb-hive-stress")
        var table_hive_condition = document.getElementById("tb-hive-condition")
        var table_data_date = document.getElementById("tb-data-date")

        table_hive_name.innerHTML = hive_name

        // Update the table
        if(stress_data == null){
            table_hive_stress.innerHTML = "No DATA"
            table_hive_condition.innerHTML = "No DATA"
            table_data_date.innerHTML = "No DATA"

        } else {
            let latest = stress_data[0]
            let relative_stress = latest.relative_value
            let date = latest.date

            let color = (relative_stress >= 0.75) ? "red" : (relative_stress >= 0.4) ? "orange" : "green";
            let condition = (relative_stress >= 0.75) ? "High Stress" : (relative_stress >= 0.4) ? "Medium Stress" : "Healthy";

            table_hive_stress.innerHTML = relative_stress
            table_hive_condition.innerHTML = condition
            table_hive_condition.style.color = color

            table_data_date.innerHTML = format_date(date)
        }

    }
    
    function update_chart_1(){

        if (stress_data != null){

            var y_data = stress_data.map(obj => obj.relative_value)
            y_data = y_data.reverse()

            //var x_data = Object.keys(y_data);
            var x_data = stress_data.map(obj => format_date(obj.date))

        } else{
            var y_data = []
            var x_data = []
        }

        if (chart_1_drawn){
            chart1.data.datasets[0].data = y_data;
            chart1.data.labels = x_data
            chart1.update();

        } else {
            chart1 = new Chart(ctx1, {
                type: "line",
                data: {
                    labels: x_data,
                    datasets: [{
                        label: "Relative Stress",
                        data: y_data,
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        borderColor: "rgba(75, 192, 192, 1)",
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    scales: {
                        xAxes: [{
                            gridLines: {
                                display: false
                            },
                            ticks: {
                                display: false,
                                fontSize: 12,
                                autoSkip: true,
                                maxRotation: 0,
                                padding: 10,
                                maxTicksLimit: 3

                            },
                            scaleLabel: {
                                display: false,
                                labelString: 'Time',
                                fontSize: 20
                            }
                        }],
                        yAxes: [{
                            gridLines: {
                                display: false
                            },
                            ticks: {
                                fontSize: 12,
                                autoSkip: true,
                                maxTicksLimit: 5
                            },
                            scaleLabel: {
                                display: false,
                                labelString: 'Stress',
                                fontSize: 20
                            }
                        }]
                    },

                    animation: {
                        duration: 0,
                        easing: "linear",

                    }

                }
            });

            chart_1_drawn = true

        }

    }

    function update_chart_2(){

        if(stress_data != null){

            // Update per reading chart (chart 2)
            var y_data = stress_data[reading_selector].data_points
            var x_data = Object.keys(y_data);

            let relative_stress = stress_data[reading_selector].relative_value

            var stress_label = document.getElementById("chart-2-label")
            stress_label.innerHTML = `Stress Level: ${relative_stress}`
            stress_label.style.color = (relative_stress >= 0.75) ? "red" : (relative_stress >= 0.4) ? "orange" : "green";

        } else{
            var y_data = []
            var x_data = []

            var stress_label = document.getElementById("chart-2-label")
            stress_label.innerHTML = `N/A`
            stress_label.style.color = "black"
        }

        if (chart_2_drawn){
            chart2.data.datasets[0].data = y_data;
            chart2.data.labels = x_data
            chart2.update();

        } else {
            chart2 = new Chart(ctx, {
                type: "line",
                data: {
                    labels: x_data,
                    datasets: [{
                        label: "Absorbtion",
                        data: y_data,
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        borderColor: "rgba(75, 192, 192, 1)",
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    scales: {
                        xAxes: [{
                            gridLines: {
                                display: false
                            },
                            ticks: {
                                fontSize: 12
                            }
                        }],
                        yAxes: [{
                            gridLines: {
                                display: false
                            },
                            ticks: {
                                fontSize: 12,
                                maxTicksLimit: 5
                            }
                        }]
                    },

                    animation: {
                        duration: 0,
                        easing: "linear",

                    }

                }
            });

            chart_2_drawn = true
        }
    }

    function update_chart_selector(){
        var selector = document.getElementById("selector")
        
        

        if (stress_data != null){
            var dates = stress_data.map(obj => obj.date)

            if (prev_dates.length != dates.length){
            
                selector.innerHTML = ``

                for(i in dates){
                    var str_date = format_date(dates[i])
                    selector.innerHTML += `<option value="${i}">${str_date}</option>`
                }

                if (prev_dates.length == 0){
                    reading_selector = 0
                    update_chart_2()
                }

                prev_dates = dates

            }
        } else {
            selector.innerHTML = `<option value="">NO DATA</option>`

            if (prev_dates.length != 0){
                    update_chart_2()
            }

            prev_dates = []
        }
    }
    

    function changeChart2(id){
        reading_selector = id
        update_chart_2()
    
    }

    async function initial_render(){
        update_table()
        update_chart_1()
        update_chart_2()
        update_chart_selector()
    }

    async function init_data(){
        await load_data()
        await initial_render()
    }

    async function update_loop(){
        await load_data()

        update_table()
        update_chart_1()
        update_chart_selector()

        setTimeout(update_loop, 1000);
    }

    init_data()

    setTimeout(update_loop, 1000);

</script>